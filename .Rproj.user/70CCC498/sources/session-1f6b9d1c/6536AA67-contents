library(nycflights13)
library(tidyverse)
#> ── Attaching core tidyverse packages ───────────────────── tidyverse 2.0.0 ──
#> ✔ dplyr     1.1.4     ✔ readr     2.1.5
#> ✔ forcats   1.0.0     ✔ stringr   1.5.1
#> ✔ ggplot2   3.5.2     ✔ tibble    3.2.1
#> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1
#> ✔ purrr     1.0.4     
#> ── Conflicts ─────────────────────────────────────── tidyverse_conflicts() ──
#> ✖ dplyr::filter() masks stats::filter()
#> ✖ dplyr::lag()    masks stats::lag()
#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all
#>  conflicts to become errors

# to use R's base versions of filter() and lag(), have to do this:
# package_name::function_name()
stats::filter()
stats::lag()

# 3.1.2 nycflights13
# another example of package_name::function_name()
nycflights13::flights
?flights

typeof(flights) # R sees as list

# tibbles designed for larger datasets, so default printing is not cumbersome
flights # A tibble: 336,776 × 19

# ways to view tibbles
# (1)
View(flights) # best way to view all data, if in Rstudio, comes with filter!

# (2)
# print() only prints first 10 rows and however many columns fits in the console
# but can use width = Inf to change that
print(flights,width = Inf) # prints all the columns

# (3)
glimpse(flights)

# 3.1.3 dplyr basics
# 6 things dplyr verbs (functions) share:
# (1) first argument is dataframe
# (2) subsequent arguments describe which cols
# to operate on using var names (NOT quoted, "quasiquoted")
# (3) output always new dataframe
# (4) really good at one operation, so need to "|>" pipe multiple together
# (5) operate on one of the following: rows, cols, groups, or tables
# pipe takes thing on its left and passes it along to fn on its right:
# x |> f(y) = f(x,y)
# x |> f(y) |> g(z) = g(f(x,y),z)
# (6) NEVER modify their inputs, always produces new dataframe

flights |>
  filter(dest == "IAH") |> 
  group_by(year, month, day) |> 
  summarize(
    arr_delay = mean(arr_delay, na.rm = TRUE)
  )

# 3.2 Row verbs: 
# 1. filter(), 
# 2. arrange() (with desc())
# 3. distinct()
# 4. count()

# filter() keeps rows based on values of columns, slice_*() for rows by position
# filter() args:
# (1st) dataframe
# (2nd or more) conditions to keep the row
  # conditions are >, >=, <, <=, ==, !=, and
  # can be combined with & and | 

# get all the flights departing over 120 min late
flights |> filter(dep_delay > 120)

# flights departing Jan 1
flights |> 
  filter(month == 1 & day == 1)

# flights departing Jan or Feb
flights |> 
  filter(month == 1 | month == 2)
  # WHICH IS EQUIVALENT TO SHORTCUT VERSION
flights |>
  filter(month %in% c(1,2))

# to save the result of a filter operation
jan1 <- flights |> 
  filter(month == 1 & day == 1)

# common errors with filter:

# error 1: accidental = instead of ==
# flights |> 
#   filter(month = 1)
# #> Error in `filter()`:
# #> ! We detected a named input.
# #> ℹ This usually means that you've used `=` instead of `==`.
# #> ℹ Did you mean `month == 1`?

# error 2: or like english instead of explicit boolean:
flights |> 
  filter(month == 1 | 2) # doesnt throw error but is nonsensical since 2 is
# treated as a TRUE, 
# https://stackoverflow.com/questions/5681166/what-evaluates-to-true-false-in-r

# arrange() changes order of rows based on values of columns
# arrange() args:
# 1st. dataframe
# 2nd. set of column names or more complicated expressions to order by,
# if more than 1 column name given then each additional column used to break
# ties from preceding column

# this orders by departure time which is broken into 4 columns
flights |> 
  arrange(year, month, day, dep_time)

# desc() expression re-orders based on col_name in Descending order
flights |> 
  arrange(desc(dep_delay)) 

# distinct() finds all unique rows in dataset, so primarily operates on rows but
# occasionally will supply column names
# NOTE: only keeps first unique occurrence (discarding the rest!)

# remove duplicate rows if there are any
flights |> 
  distinct()

# find all unique origin and destination pairs
# and only return just the pairs (not entire rows)
flights |> 
  distinct(origin, dest)

# same as above except return entire rows whose origin/dest pairs are unique
flights |>
  distinct(origin, dest, .keep_all = TRUE)
# ^ NOTICE: how they're all jan 1 for the displayed rows. that's b/c only 1st
# occurrence of unique row is kept

# count() will count all the unique pairs, you can sort said pairs 
flights |>
  count(origin,dest,sort = TRUE)

# can add a new column with dplyr verbs
flights |>
  count(origin,dest,sort = TRUE,NEW_COLUMN = TRUE)

# 3.3 Column verbs: 
# 1. mutate(), creates new cols derived from existing cols
# 2. select(), changes which cols are present
# 3. rename(), changes names of cols
# 4. relocate(), changes positions of cols (default front)

# 3.3.1 mutate()
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = 1 # adds columns in order given before this col index
    # alternatively 
    # .before = month # use col name instead of index
    
    )

flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    # .after = 1, # adds columns in order given after this col index
    # alternatively
    .after = day, # use col name instead of index
    .keep = "used" # controls which cols are kept. "used" = keep only used cols
  )

# 3.3.2 select()

# select cols by name
flights |>
  select(year,month,day)

# select cols between two cols (inclusive)
flights |>
  select(year:day)

flights |>
  select(1:3)

# select cols except those from year to day (inclusive)
flights |>
  select(!year:day)

# select cols that are "is.something"
flights |>
  select(where(is.character))

# other tools WITH select (and other selecting funcs)
# starts_with("abc"), col names beginning with "abc"
# ends_with()
# contains()
# num_range("x",1:3): matches x1, x2, x3
# matches() with some regex

# rename variables as you select, using "="
flights |>
  select(tail_num = tailnum)

# for automated column naming cleanup!
janitor::clean_names(flights) # fails to find "tailnum" a problem, as v2.2.1
?janitor::clean_names()

# 3.3.3 rename() - keep all the columns but rename a few
flights |>
  rename(tail_num = tailnum)

# 3.3.4 relocate()
flights |> 
  relocate(time_hour, air_time) 

# using .before and .after arguments like mutate()
flights |> # ":" to select range
  relocate(year:dep_time, .after = time_hour)

flights |> relocate(dep_time:year) # ":" to reverse range

flights |> 
  relocate(starts_with("arr"), .before = dep_time)
