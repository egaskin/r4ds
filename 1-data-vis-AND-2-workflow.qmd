---
title: "Chapters 1 & 2, Notes + Code"
format: html
editor: visual
---

## Why this formatting?
I originally had all of chapter 1, 2, and 3 in R scripts, but then realized a "Jupyter Notebook" like experience would make things 1000x better. I've just copied and pasted the code into the cell below

## Introduction

### What we will learn

![data science modeling process visual (Figure 1)](https://r4ds.hadley.nz/diagrams/data-science/base.png)

steps of data science: 1. wrangling: fighting data into desired format via tidy + transform - tidy = giving consistent structure to data, usually each column is variable and row is observation - transform = - filtering for observations of interest - creating new variables that are functions of existing variables - calculating summary statistics 2. visualization: good visuals reveal new things, raise new questions, hint at whether your wrong/right, and hint about if more data is needed - visuals aren't scalable, they require humans to interpret 3. model: mathematical or computational tool for answering precise questions - complementary tools to visualizing once questions have been made precise 4. communication: models and visualizations are USELESS unless we can communicate results to others

### What we won't learn

-   modeling in great depth. next visit [Tidy Modeling with R](https://www.tmwr.org/)
-   big data (10-100 GB), next learn [data.table](https://github.com/Rdatatable/data.table)

### Prerequisites

``` r
# tidyverse is R's main data science resource
install.packages("tidyverse") 

# load it
library(tidyverse) 

# tidyverse changes frequently, be sure to run this somewhat frequently (weekly?)
tidyverse_update() 

# other packages needed for this book:
install.packages(
  c("arrow", "babynames", "curl", "duckdb", "gapminder", 
    "ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman", 
    "leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins", 
    "repurrrsive", "tidymodels", "writexl")
  )

# other packages will be needed, but we can install them as we go. so when we try this 
library(some_package)
#> Error in library(some_package) : there is no package called some_package
# ^^^ whenever we see an error like this, install.packages("some_package")
```

## Whole game

### 1 Data visualization

#### 1.1 Introduction

-   ggplot2: very common R data science tool for graphs/plots
    -   "grammar of graphics" = system to describe and build graphs

#### 1.2 First steps

-   questions we want to ask about penguins:
    -   Do penguins with longer flippers weigh more or less than penguins with shorter flippers?
    -   What does the relationship between flipper length and body mass look like? Is it positive? Negative? Linear? Nonlinear?
        -   Does the relationship vary by the species of the penguin?
        -   How about by the island where the penguin lives?
-   visualizations can help us answer these questions!

##### 1.1.1 data frame (`penguins`)

-   data frame: rectangular collection of variables (columns) and observations (rows)
-   variable: measurable quantity, quality or property
-   value: state of variable at time of measurement
    -   variable values can change from measurement to measurement
        -   (either as experimental artifacts - in relation to quantities we DONT want to measure or truly pure randomness - or in relation to quantity we want to measure)
-   observation (aka data point): set of measurements made under similar conditions
    -   usually make all measurements of observation at same time on same object
    -   observation contains several values, each associated with different variables
-   tabular data: set of values, each associated with a variable and observation
    -   tidy = each value in its own indexable cell, each variable in its own column, and each observation in its own row
-   for palmerpenguins:
    -   variable = attribute shared by all penguins
    -   observation = refers to attributes of single penguin
-   see file "./code/whole-game/1-data-visualization.R" for remainder of notes

### Chapter 1 Code

```{r}
library(tidyverse)
library(palmerpenguins)
library(ggthemes)

#######################################
# section 1.2 first steps
# ways of viewing data frames
  # way 1:
  # view the tibble data frame in console
penguins
  # or equivalently
palmerpenguins::penguins # some_package_name::some_object_in_package

  # way 2:
head(penguins) # prints to console
  
  # way 3: essentially transposed head() view
  # MUCH nicer than head(t(penguins)), since each row of transpose(t(penguins)) is ENTIRE obs set for some variable
glimpse(penguins) # prints to console
  
  # way 4: *in Rstudio*
View(penguins) # opens table viewer! does not print to console


# to learn penguins attributes
?penguins

# PLOT VERSION 1/2
# plotting in ggplot, always starts with ggplot(), then you layer on it
ggplot(
  # 1st layer, "data = "
  # best practice is assign data into plot 1st but can do it later
  data = penguins,
  
  # 2nd layer, "mapping ="
  # mapping argument defines how variables are displayed
  # with GLOBAL color (see version 2 below for local)
    # scaling: ggplot's automatic assignment of unique colors when
    # mapping aesthetics to categoricals
  mapping = aes(x=flipper_length_mm, y = body_mass_g, color = species),
  
) + # 3rd layer, "geom_x()" NOTICE: ") +" outside ggplot() call precedes "geom_"
  # geometrical object used to represent data points
  # "geom_" prefix e.g. geom_bar(), geom_line(), geom_boxplot(), geom_point()
  geom_point() +
  # 4th layer, NOTICE two things
    # (1) ") +" precedes again
    # (2) aesthetic mappings defined at global level passed down to each layer
    # of the geom. should pass color directly to geom_point() to avoid this
  geom_smooth(method = "lm")

# PLOT VERSION 2/2
  # differences from version 1:
  # (1) local coloring for geom_point(mapping=aes()); 1 line for all 3 species
  # (2) local shape for geom_point(mapping=aes()); distinguish species by shape
  # (3) additional labels added with labs() 
  # (4) scale_color_colorblind() to help colors be distinguisable for colorblind
ggplot(
  # 1st layer, "data = "
  data = penguins,
  
  # 2nd layer, "mapping ="
  # without GLOBAL color
  mapping = aes(x=flipper_length_mm, y = body_mass_g),
  
) + # 3rd layer, adding local color
  geom_point(mapping = aes(color=species,shape=species),) +
  # 4th layer, with local coloring so global line
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)", # x and y axis labels
    color = "Species", shape = "Species"
  ) +
  scale_color_colorblind()

#######################################
# section 1.3 ggplot2 calls

# ggplot2 function calls with less typing/lines:
  # efficient call 1/2
ggplot(penguins,aes(x=flipper_length_mm, y=body_mass_g))+
  geom_point()
  # efficient call 2/2 (with pipe |>)
penguins |>
  ggplot(aes(x=flipper_length_mm, y=body_mass_g))+
  geom_point()

#######################################
# section 1.4 visualizing distributions
# visualizing a variable's distribution depends on if categorical or numerical

# 1.4.1 categorical variables- use bar chart
  # categorical: can only take one of a finite set of values
  # R's uses factors to handle categorical vars

  # (1.1) regular bar
ggplot(penguins,aes(x=species))+
  geom_bar()

  # (1.2) if UNORDERED categorical, then order them by frequency for visual help
  # fct_infreq() is function for handling factors, see Ch. 16
ggplot(penguins, aes(x = fct_infreq(species))) +
  geom_bar()


# 1.4.2 numerical variables 
  # numerical (quantitative): take on wide/infinite range of values, and makes
  # sense to add, subtract, or average those values. Continuous OR Discrete

  # (1) histogram common for visualizing continuous numerical:
ggplot(penguins, aes(x = body_mass_g)) + 
  geom_histogram(binwidth = 200)
  # always explore variety of bin widths! diff widths reveal diff patterns
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 20) # too many bins
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 2000)# too few bins


  # (2) density plot good alternative for continuous numericals (esp. if they
  # come from an underlying distribution)
ggplot(penguins, aes(x=body_mass_g))+
  geom_density()

#######################################
# section 1.5 visualizing relationships - requires >= 2 vars mapped to aesthetic

# section 1.5.2 - one numerical and one categorical
# (1): boxplot: visualizing data in percentiles, group data by category
# with aes() x argument
ggplot(penguins,aes(x=species,y=body_mass_g))+
  geom_boxplot()

# (2): density/histogram also good for numerical vs categorical, if colored by 
# categorical
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
  geom_density(linewidth = 0.75, alpha = 0.5)
# BIG POINTS:
  # 1. Map variables to aesthetics if want visual attribute represented by
  # aesthetic to vary based on that variable. Otherwise, #2
  # 2. If variable not mapped, set value of aesthetic (or allow default setting) 

# section 1.5.2 - two categoricals
# (1.1): use stacked bar plot
# NOTE: map variable to be separated into bars to aes() x arg, and variable for
# changing colors to aes() fill arg
# v1: good for showing frequency each species by island, but percentages unclear
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar() # y-axis absolute count

# (1.2): good for showing percentage each species
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(position="fill")  # y-axis percentage

# 1.5.3 two numerical variables
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()

# 1.5.4 three of more variables

# MEH means this not preferred over the other option(s)!
# (MEH 1) scatterplot but map to multiple aes (don't do too many-> can confuse!)
# body_mass_g vs flipper_length_mm, colored by species, marker by island
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = island))

# (2) subplots/facet, splitting by 1 category. to facet plot by 1 categorical, 
# use facet_wrap() which takes a "formula" created by "~" operator
ggplot(penguins,aes(x=flipper_length_mm,y=body_mass_g))+
  geom_point(aes(color=species,shape=species))+
  facet_wrap(~island)

# how to see options for aesthetics ggplot
vignette("ggplot2-specs")

#######################################
# 1.6 saving your plots 
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()

# ggsave(), two things:
# (1) saves most recent plot to specified location (default working directory)
# (2) specify the width and height for reproducibility
ggsave(filename = "./plots/1-6-penguin-plot.png")
```

### Chapter 1 Exercises

```{r}
#######################################
library(tidyverse)
library(palmerpenguins)
library(ggthemes)

# 1.2.5 Exercises
# 1. How many rows are in penguins? How many columns?
# Answer: 344 rows (observations), 8 columns (variables)
dimensions = dim(penguins)
num_rows <- dimensions[1]
num_cols <- dimensions[2]
print(c(num_rows,num_cols))


# 2. What does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.
# Answer: a number denoting bill depth (millimeters)
?penguins


# 3. Make a scatterplot of bill_depth_mm vs. bill_length_mm. That is, 
# make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the 
# x-axis. Describe the relationship between these two variables.
# Answer: Based on the plot made from below, there seems to be a positive lightly
# linear relationship between bill depth and bill length
ggplot(
  data = penguins,
  mapping = aes(x=bill_length_mm,y=bill_depth_mm),
) +
  geom_point(mapping = aes(color=species,shape=species))


# 4. What happens if you make a scatterplot of species vs. bill_depth_mm? What 
# might be a better choice of geom?
# Answer: Based on scatter plot, probably a histogram colored by species (or 3 
# separate histograms). I found the bar plot to be unhelpful.

# scatter plot
ggplot(
  data = penguins,
  mapping = aes(y=bill_depth_mm,x=species),
) +
  geom_point()

# bar plot: im not sure how to interpret the height of the bar tbh
ggplot(
  data = penguins,
  mapping = aes(y=bill_depth_mm,x=species),
) +
  geom_col() # NOT geom_bar(), geom_bar() only takes x OR y (not both) and 
# attempts to count each of x. this

# naive histogram: this kinda sucks to but is better than bar plot
ggplot(
  data = penguins,
  mapping = aes(y=bill_depth_mm),
) +
  geom_histogram(mapping=aes(color=species))

# multi group histogram: much better, thanks to:
# https://r-graph-gallery.com/histogram_several_group.html
ggplot(
  data = penguins,
  mapping = aes(x=bill_depth_mm, fill = species),
) +
  geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
  scale_fill_manual(values=c("#69b3a2", "#404080","#b3697a")) +
  labs(fill="")

# 5. Why does the following give an error and how would you fix it?
# Answer: x and y have not been assigned, so ggplot doesn't know to plot from
# the penguins dataframe. Need to add mapping with aesthetics to some var/obs.
ggplot(
  data = penguins,
  mapping = aes(x=bill_length_mm,y=body_mass_g)
) + 
  geom_point()

# 6. What does the na.rm argument do in geom_point()? What is the default value 
# of the argument? Create a scatterplot where you successfully use this argument 
# set to TRUE.
# Answer: na.rm is a boolean used to specify to remove missing values silently
ggplot(
  data = penguins,
  mapping = aes(x=bill_length_mm,y=body_mass_g)
) + 
  geom_point(na.rm=TRUE) + 
  labs(caption = "Data come from the palmerpenguins package")

# 7. Add the following caption to the plot you made in the previous exercise: 
# “Data come from the palmerpenguins package.” 
# Hint: Take a look at the documentation for labs().
# Answer: see plot above

# 8. Recreate the following visualization. What aesthetic should bill_depth_mm 
# be mapped to? And should it be mapped at the global level or at geom level?
# Answer: see plot below. bill_depth_mm should be mapped to color aesthetic and
# at the geom_level so there is one curve.
ggplot(
  data = penguins,
  mapping = aes(x=flipper_length_mm,y=body_mass_g)
) +
  geom_point(mapping=aes(color=bill_depth_mm)) + 
  geom_smooth()

# 9. Run code below in your head and predict what the output will look like. 
# Then, run the code in R and check your predictions.
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)
) +
  geom_point() +
  geom_smooth(se = FALSE)

# 10. Run code below in your head. Will these two graphs look different? And
# why/why not?
# Answer: they will not look different. color wasn't specified so there is no 
# grouping differences between the 1st version (global defining x and y) and 
# 2nd version (locally defining x and y redundantly for both "geom_")
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point() +
  geom_smooth()

ggplot() +
  geom_point(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  ) +
  geom_smooth(
    data = penguins,
    mapping = aes(x = flipper_length_mm, y = body_mass_g)
  )

#######################################
# 1.4.3 Exercises
# 1. Make a bar plot of species of penguins, where you assign species to the y 
# aesthetic. How is this plot different?
# Answer: the bars are horizontal! perpendicular to y-axis
ggplot(penguins,aes(y=species))+
  geom_bar()

# 2. How are the following two plots different? Which aesthetic, color or fill, 
# is more useful for changing the color of bars?
# Answer: fill achieves a more drastic color change, but I guess depends on 
# what you intended.
ggplot(penguins, aes(x = species)) +
  geom_bar(color = "red")

ggplot(penguins, aes(x = species)) +
  geom_bar(fill = "red")

# 3. What does the bins argument in geom_histogram() do?
# Answer: bins controls the number of bins, but is overridden by binwidth arg

# 4. Make a histogram of the carat variable in the diamonds dataset that is 
# available when you load the tidyverse package. Experiment with different 
# binwidths. What binwidth reveals the most interesting patterns?
# Answer: binwidth 0.5 seems to have a good number of bars to reveal patterns
head(diamonds)
# boxplot(x=diamonds["carat"],y=diamonds["color"])
ggplot(diamonds,aes(y=carat,x=color))+
  geom_boxplot()
test_binwidths = c(0.125/2,0.125, 0.25, 0.5, 0.75,1)[6:1]
for (i in test_binwidths){
  print(i)
  p_i <- ggplot(diamonds,aes(x=carat))+
    geom_histogram(binwidth = i)+
    labs(
      title = paste("Diamond Carat Histogram for Binwidth",i),
    ) 
  print(p_i)
}

#######################################
# 1.5.5 Exercises
# 1. The mpg data frame that is bundled with the ggplot2 package contains 234 
# observations collected by the US Environmental Protection Agency on 38 car 
# models. Which variables in mpg are categorical? Which variables are numerical? 
# (Hint: Type ?mpg to read the documentation for the dataset.) How can you see 
# this information when you run mpg?
# Answer: attempting to use the logic 'if bar plot makes sense' then maybe 
# categorical + 'does it make sense to add, subtract, and/or average with this 
# after reading ?mpg description' then maybe numerical, we have the following:
# numerical vars = {cty,hwy}, since makes sense to add/average/subtract these
# categorical vars = 
# {manufacturer, model, displ, year, cyl, trans, drv, fl, class} since does not
# make sense to add/average/subtract these (except averaging for years, I guess)

View(mpg)

# NOTE: "BREAKS" BECAUSE names() function returns strings, but need actual name, 
# NOT string
for (name in names(mpg)){
  print(name)
  p = ggplot(data=mpg,mapping=aes(x=name,))+
    geom_bar()
  print(p)
}

# NOTE: THIS WORKS! have to use format ".df[[col_name]]" if data = dataframe
# alternatively within a function(df,col) use curly
for (name in names(mpg)){
  print(name)
  p = ggplot(data=mpg,mapping=aes(x=.data[[name]],))+
    geom_bar()
  print(p)
}

# 2. Make a scatterplot of hwy vs. displ using the mpg data frame. Next, map a 
# third, numerical variable to color, then size, then both color and size, then 
# shape. How do these aesthetics behave differently for categorical vs. numerical 
# variables?
# Answer: color works well for both numerical and categorical - the colors can 
# be assigned on a continuous gradient or discrete scale respectively. but, 
# size doesn't seem to work very well for categorical or categorical-like vars
# such as cyl - in fact size throws a warning "Using size for a discrete 
# variable is not advised." Being able to interpolate between sizes is intuitive
# which is lost for discrete vars.

ggplot(mpg,aes(x=displ,y=hwy))+
  geom_point()

# numerical to color
ggplot(mpg,aes(x=displ,y=hwy,color=cty))+
  geom_point()

ggplot(mpg,aes(x=displ,y=hwy,color=cyl))+
  geom_point() # does cyl count as numerical?

# numerical to size
ggplot(mpg,aes(x=displ,y=hwy,size=cty))+
  geom_point()

ggplot(mpg,aes(x=displ,y=hwy,size=cyl))+
  geom_point()

# numerical to color and size
ggplot(mpg,aes(x=displ,y=hwy,color=cty,size=cyl))+
  geom_point()

# WINNER WINNER WINNER imo
# you can see the clear patttern that as city gas mileage increases so does
# hwy. cyl by color also reveals 3 distinct groupings and a trend:
# more cylinders comes with more displacement but worse gas mileage
ggplot(mpg,aes(x=displ,y=hwy,color=cyl,size=cty))+
  geom_point()

# 3. In the scatterplot of hwy vs. displ, what happens if you map a third variable 
# to linewidth?
# Answer: scatter plots by themselves do not have lines (unless you overlay with
# a smoothing function), so linewidth does nothing no matter the variable.
ggplot(mpg,aes(x=displ,y=hwy,color=cyl,size=cty,linewidth=year))+
  geom_point()

# 4. What happens if you map the same variable to multiple aesthetics?
# Answer: The variable's relationship to other variable is displayed in multiple
# ways.
ggplot(mpg,aes(x=displ,y=cty,color=cty,size=cty))+
  geom_point()

# 5. Make a scatterplot of bill_depth_mm vs. bill_length_mm and color the points 
# by species. What does adding coloring by species reveal about the relationship 
# between these two variables? What about faceting by species?
# Answer: Coloring by species shows that for bill_depth_mm vs bill_length_mm,
# different linear relationships exist depending on species. Facet also reveals
# the same thing
ggplot(penguins,aes(x=bill_length_mm, y=bill_depth_mm, color=species))+
  geom_point()

ggplot(penguins,aes(x=bill_length_mm, y=bill_depth_mm, color=species))+
  geom_point()+
  facet_wrap(~species)

# 6. Why does the following yield two separate legends? How would you fix it to 
# combine the two legends?
ggplot(
  data = penguins,
  mapping = aes(
    x = bill_length_mm, y = bill_depth_mm, 
    color = species, shape = species
  )
) +
  geom_point() +
  labs(color = "Species",
       shape = "Species") # ADD: shape = "Species"

# 7. Create the two following stacked bar plots. Which question can you answer 
# with the first one? Which question can you answer with the second one?
# Answer: 
# 1st plot answers: "given an island, what's the % species breakdown?"
# 2nd plot answers: "given a species, what's the % island breakdown?" or what
# different islands does this species live on
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(position = "fill")
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "fill")
#######################################
# 1.6.1 Exercises

# 1. Run the following lines of code. Which of the two plots is saved as 
# mpg-plot.png? Why?
# Answer: the 2nd once, since it is the most recent plot
ggplot(mpg, aes(x = class)) +
  geom_bar()
ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point()
ggsave("./plots/1-6-1-1-mpg-plot.png")

# 2. What do you need to change in the code above to save the plot as a 
# PDF instead of a PNG? How could you find out what types of image files would 
# work in ggsave()?
# Answer: see ggsave below + use ?ggsave to see save formats
ggsave("./plots/1-6-1-1-mpg-plot.pdf")
```

### 2 Workflow basics:

-   "\<-" assignment operator shortcut "Alt + -" (use "Alt" key and "-" key)
-   use comments to explain :
    1.  WHY not what/how. what/how should be understandable from code, why is not necessarily clear
    2.  explain overall plan at start, and important insights as you go. not recoverable from code
-   Rstudio autocompletion, start typing then click either:
    -   TAB, to get vars
    -   Cmd/Ctrl + ↑, to get commands you've typed with those characters (use arrows to navigate)

```{r}
#######################################
# 2.5 exercises
# 0. bonus code that didn't belong in its own file
seq(1,10) # creates a integer sequence from 1 to 10

# 1. Why does this code not work?

my_variable <- 10
tryCatch({my_varıable},
         error=function(e){
           cat("Caught Error!",conditionMessage(e),
               "since this should have an i not dotless ı \n")
         }
)
# 2. Tweak each of the following R commands so that they run correctly:
library(tidyverse)

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ,y = hwy)) +
  geom_smooth(method = "lm",aes(x = displ,y = hwy))

# 3. Press Option + Shift + K / Alt + Shift + K. What happens? How can you get 
# to the same place using the menus?
# Answer: Opens the keyboard shortcuts! Same as Help > Keyboard Shortcuts Help

# 4. Let’s revisit an exercise from the Section 1.6. Run the following lines of 
# code. Which of the two plots is saved as mpg-plot.png? Why?
# Answer: the bar plot will, since we have assigned the plot to an object and 
# are specifically saving this object.
my_bar_plot <- ggplot(mpg, aes(x = class)) +
  geom_bar()
my_scatter_plot <- ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point()
ggsave(filename = "./plots/1-6-1-1-mpg-plot.png", plot = my_bar_plot)

```