)
tryCatch({my_varıable},
error=function(e){
cat("Caught Error!",conditionMessage(e),
"since this should have an i not dotless ı \n")
}
)
libary(tidyverse)
library(tidyverse)
ggplot(dTA = mpg) +
geom_point(mapping = aes(x = displ,y = hwy)) +
geom_smooth(method = "lm")
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,y = hwy)) +
geom_smooth(method = "lm")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,y = hwy)) +
geom_smooth(method = "lm",aes(x = displ,y = hwy))
typeof(seq(1,10))
library(nycflights13)
library(tidyverse)
# another example
nycflights13::flights
?flights
typeof(flights)
typeof(flights)
flights
View(flights)
print(flights,width = Inf)
glimpse(flights)
# (3)
glimpse(flights)
|> pipe
# |> pipe
#
flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
# get all the flights departing over 120 min late
flights |> filter(dep_delay > 120)
# flights departing Jan 1
flights |>
filter(month == 1 & day == 1)
# flights departing Jan or Feb
flights |>
filter(month == 1 | month == 2)
# WHICH IS EQUIVALENT TO SHORTCUT VERSION
flights |>
filter(month %in% c(1,2))
bool(2)
boolean(2)
c(2,TRUE)
c(2,TRUE,TRUE)
c(2,TRUE,TRUE,FALSE)
c(2,TRUE,TRUE,FALSE) == TRUE
as.logical(2)
as.logical3
as.logical(4)
identical(as.logical(4),TRUE)
# this orders by departure time which is broken into 4 columns
flights |>
arrange(year, month, day, dep_time)
# distinct() finds all unique rows in dataset, so primarily operates on rows but
# occasionally will supply column names
flights |>
distinct()
1.0 == 1L
1.000001 == 1L
1.0000000000000000000000000000000000000000000000000000000000000000000001 == 1L
1.000000000000000000000000000000000000000000000000000000000000000000001 == 1L
1.000000000000000000000000000000000000000000001 == 1L
1.00000000000000000000000000000000000000000001 == 1L
1.0000000000000000000000000000000000000000001 == 1L
value = 1.0000000000000000000000000000000000000000001
value
typeof(value)
value/10
sprintf("%.20f", 1.0000000000000001)
sprintf("%.20f", 1.000000000000001)
sprintf("%.20f", 1.0000000000000001)
sprintf("%.20f", 1.000000000000001)
sprintf("%.20f", 1.00000000000001)
sprintf("%.20f", 1.0000000000001)
sprintf("%.20f", 1.00000000001)
sprintf("%.20f", 1.0000000001)
sprintf("%.20f", 1.000000001)
sprintf("%.20f", 1.00000001)
sprintf("%.20f", 1.000001)
sprintf("%.20f", 1.0001)
sprintf("%.20f", 1.001)
sprintf("%.20f", 1.01)
sprintf("%.20f", 1.1)
# remove duplicate rows if there are any
flights |>
distinct()
flights
# Find all unique origin and destination pairs
flights |>
distinct(origin, dest)
# same as above except return entire rows whose pairs are unique
flights |>
distinct(origin, dest, .keep_all = TRUE)
# count() will count all the unique pairs, you can sort said pairs
flights |>
count(origin,dest,sort = TRUE)
# count() will count all the unique pairs, you can sort said pairs
flights |>
count(origin,dest,sort = TRUE,.keep_all = TRUE)
# count() will count all the unique pairs, you can sort said pairs
flights |>
count(origin,dest,sort = TRUE,NEW_COLUMN = TRUE)
# count() will count all the unique pairs, you can sort said pairs
flights |>
count(origin,dest,sort = TRUE)
?flights
flights["carrier"]
flights["month"]
flights["dep_delay" == 0]
flights["dep_delay" < 1]
flights["dep_delay"]
flights["dep_delay"] < 0
flights |>
filter(arr_delay >= 2 &
dest %in% c("IAH","HOU") &
carrer %in% c("UA","AA","DL") &
month %in% c(7,8,9) &
dep_delay <= 0 &
arr_delay >= 2
)
flights |>
filter(arr_delay >= 2 &
dest %in% c("IAH","HOU") &
carrier %in% c("UA","AA","DL") &
month %in% c(7,8,9) &
dep_delay <= 0 &
arr_delay >= 2
)
flights |>
filter(dep_delay >= 1 & arr_delay <= 30)
View(
flights |>
filter(dep_delay >= 1 & arr_delay <= 30)
)
View(last_condition)
last_condition <- flights |>
filter(dep_delay >= 1 & arr_delay <= 30)
last_condition
View(last_condition)
max(last_condition[arr_delay])
max(last_condition["arr_delay"])
max(last_condition["arr_delay"]) >= 30
# Were delayed by at least an hour, but made up over 30 minutes in flight
# delayed part is easy
last_condition <- flights |>
filter(dep_delay >= 1*60 & arr_delay <= 30)
last_condition
View(last_condition)
max(last_condition["arr_delay"]) >= 30 # TRUE
2148/60
flights["air_time"]/60
flights["dep_time"] + flights["air_time"] == flights["arr_Time"]
flights["dep_time"] + flights["air_time"] == flights["arr_time"]
[flights["dep_time"] + flights["air_time"] == flights["arr_time"]][10]
check <- flights["dep_time"] + flights["air_time"] == flights["arr_time"]
check
check[1:10]
check_sum <- flights["dep_time"] + flights["air_time"]
check_sum[1:10]
check_sum
?dplyr::add_row()
?across()
colSums()
flights[1:10]
flights[1:10,1]
flights[1:10,1] + flights[1:10,2]
flights[:,"dep_time"]
flights[,"dep_time"]
flights[,"dep_time"] + flights[,"air_time"]
check_sum <- flights[,"dep_time"] + flights[,"air_time"]
check_sum[1:10]
dim(check_sum)
names(check_sum)
check_sum <- colSums()
?colSums()
df <- data.frame(
id = 1:5,
x1 = c(1, 2, 3, 4, 5),
x2 = c(2, 4, 6, 8, 10),
y1 = c(3, 6, 9, 12, 15),
y2 = c(4, 8, 12, 16, 20)
)
df
df["x1"]
df["x1"] + df["x1"]
check_sum[1:10,]
check_sum[1:1]
check_sum[1:10]
check_sum[1:10,]
flights["arr_time"][1:10]
flights["arr_time"][1:10,]
?flights
flights["time_hour"]
# 2. Sort flights to find the flights with the longest departure delays. Find
# the flights that left earliest in the morning.
# Answer:
flights |>
sort(decreasing)
# 2. Sort flights to find the flights with the longest departure delays. Find
# the flights that left earliest in the morning.
# Answer:
flights |>
sort(decreasing=TRUE)
?arrange()
?rlang::args_data_masking
vignette("programming", package = "dplyr")
?runif()
?arrange
# 2. Sort flights to find the flights with the longest departure delays. Find
# the flights that left earliest in the morning.
# Answer:
flights |>
arrange(dep_delay)
# 2. Sort flights to find the flights with the longest departure delays. Find
# the flights that left earliest in the morning.
# Answer:
long_delays <-
flights |>
arrange(dep_delay)
long_delays$dep_delay
long_delays$dep_delay[1:10]
# 2. Sort flights to find the flights with the longest departure delays. Find
# the flights that left earliest in the morning.
# Answer:
long_delays <-
flights |>
arrange(desc(dep_delay))
?desc
long_delays$dep_delay[1:10]
1301/60
?flights
earliest <-
flight |>
arrange(desc(dep_time))
earliest <-
flights |>
arrange(desc(dep_time))
earliest$dep_time[1:10]
earliest$dep_time[1:10]
earliest <-
flights |>
arrange(dep_time)
earliest$dep_time[1:10]
earliest
earliest$flight
earliest$flight[1:10]
earliest[1:10,c("flight","dep_time")]
# desc() for descending!
longest_dep_delays <-
flights |>
arrange(desc(dep_delay))
longest_dep_delays[1:10,c("flight","dep_time")]
#######################################
# 3.2.5 Exercises
library(nycflights13)
longest_dep_delay <-
flights |>
arrange(desc(dep_delay))
longest_dep_delay[1:10,c("flight","dep_delay")]
earliest_dep_time <-
flights |>
arrange(dep_time)
earliest_dep_time[1:10,c("flight","dep_time")]
# 3. Sort flights to find the fastest flights. (Hint: Try including a math
# calculation inside of your function.)
# Answer:
fastest_flights <-
arrange(distance/air_time)
# 3. Sort flights to find the fastest flights. (Hint: Try including a math
# calculation inside of your function.)
# Answer:
fastest_flights <-
arrange(~distance/air_time)
# 3. Sort flights to find the fastest flights. (Hint: Try including a math
# calculation inside of your function.)
# Answer:
fastest_flights <-
flights |>
arrange(distance/air_time)
fastest_flights
fastest_flights$speed <- distance/air_time
fastest_flights$speed <- fastest_flights$distance/fastest_flights$air_time
fastest_flights[1:10,c("speed")]
fastest_flights <-
flights |>
arrange(desc(distance/air_time))
fastest_flights$speed <- fastest_flights$distance/fastest_flights$air_time
fastest_flights[1:10,c("speed")]
relocate(speed)
fastest_flights <-
flights |>
mutate(speed = distance/air_time) |>
arrange(desc(speed))
relocate(speed)
fastest_flights <-
flights |>
mutate(speed = distance/air_time) |>
arrange(desc(speed)) |>
relocate(speed)
fastest_flights
1:365
1:365 %in% 1:10
# 4. Was there a flight on every day of 2013?
# Answer:
flights |>
distinct()
# 4. Was there a flight on every day of 2013?
# Answer:
flights |>
distinct(day)
# 4. Was there a flight on every day of 2013?
# Answer:
flights |>
distinct(day) |>
arrange()
flights$time_hour
flights$time_hour[1:10]
flights |>
arrange(month,day)
flights
1:365
1:12
months <- 1:12
days <- 1:365
months[days]
days[months]
flights$time_hour
# 4. Was there a flight on every day of 2013?
# Answer:
flights |>
mutate(date_MM_DD = time_hour[1:10])
flights |>
distinct(month,day)
unique_month_day_pairs <-
flights |>
distinct(month,day)
length(unique_month_day_pairs)
unique_month_day_pairs <-
flights |>
distinct(month,day)
length(unique_month_day_pairs[:,1])
unique_month_day_pairs <-
flights |>
distinct(month,day)
length(unique_month_day_pairs[,1])
unique_month_day_pairs[,1]
dims(unique)
dim(unique)
dim(unique_month_day_pairs)
distance_sorted_flights <-
flights |>
arrange(distance)
distance_sorted_flights
relocate(distance)
distance_sorted_flights
distance_sorted_flights <-
flights |>
arrange(distance) |>
relocate(distance)
distance_sorted_flights
# furthest distance first 10
distance_sorted_flights[-10:-1]
# least distance first 10
distance_sorted_flights[1:10]
# furthest distance first 10
distance_sorted_flights[-10:-1]
# furthest distance first 10
distance_sorted_flights[-10:-1,]
test <- 1:20
test
test[-20:-5]
test[-10:-5]
end_idx <- 336756-10
distance_sorted_flights[-1:end_idx,]
end_exclude_idx <- 336756-10
distance_sorted_flights[-1:-end_exclude_idx,]
end_exclude_idx <- 336756-10+20
distance_sorted_flights[-1:-end_exclude_idx,]
length(fligths)
dim.data.frame(flights)
end_exclude_idx <- dim(distance_sorted_flights)[1]-10
distance_sorted_flights[-1:-end_exclude_idx,]
rm(end_idx)
# least distance, top 10
distance_sorted_flights[1:10,]
distance_sorted_flights |>
count()
distance_sorted_flights |>
distinct(distance) |>
count()
distance_sorted_flights |>
count(distance,sort=TRUE)
distance_sorted_flights[-1:-end_exclude_idx,]
distance_sorted_flights |>
count(distance) |>
arrange(distance)
distance_sorted_flights <-
flights |>
count(distance,.keep_all = TRUE) |>
arrange(distance)
# least distance, top 10
distance_sorted_flights[1:10,]
# least distance, top 10
distance_sorted_flights[1]
# least distance, top 10
distance_sorted_flights[1,1]
distance_sorted_flights[-1:-end_exclude_idx,1]
# furthest distance, top 10
# negative indexing to exclude everything except top ten
end_exclude_idx <- dim(distance_sorted_flights)[1]-2
distance_sorted_flights[-1:-end_exclude_idx,1]
# furthest distance, top 10
# negative indexing to exclude everything except top ten
end_exclude_idx <- dim(distance_sorted_flights)[1]-1
distance_sorted_flights[-1:-end_exclude_idx,1]
# least distance, top 10
distance_sorted_flights[1,1:2]
distance_sorted_flights[-1:-end_exclude_idx,1:2]
# new way, to get number of flights meeting the distance
distance_sorted_flights <-
flights |>
count(distance) |>
arrange(distance)
# least distance, top 10
distance_sorted_flights[1,1:2]
distance_sorted_flights[-1:-end_exclude_idx,1:2]
# the number of rows equals how many unique days of 2013 had a flight
unique_month_day_pairs <-
flights |>
distinct(month,day)
nrow()
unique_month_day_pairs <-
flights |>
distinct(month,day) |>
nrow()
flights |>
distinct(month,day) |>
nrow()
flights |>
distinct(month,day) |>
nrow() ==
365
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
# 3.3.1 mutate()
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
.before = 1 # adds columns in order given before this col index
)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
# .after = 1, # adds columns in order given after this col index
# alternatively
.after = day, # use col name instead of index
.keep = "used" # controls which cols are kept. "used" = keep only used cols
)
# select cols by name
flights |>
select(year,month,day)
flights
flights |>
select(1:3)
# select cols between two cols
flights |>
select(year:day)
# select cols except those from year to day (inclusive)
flights |>
select(!year:day)
fligths
flights
# select cols that are "is.something"
flights |>
select(where(is.character))
num_range("X_",1:4)
# rename variables as you select, using "="
flights |>
select(tail_num = tailnum)
# for automated cleaning!
janitor::clean_names()
# rename variables as you select, using "="
flights |>
select(tail_num = tailnum)
# for automated cleaning!
janitor::clean_names()
# for automated column naming cleanup!
janitor::clean_names(flights)
?janitor::clean_names()
flights |>
relocate(year:dep_time, .after = time_hour)
flights
flights[dep_time]
flights |> relocate(dep_time:year)
